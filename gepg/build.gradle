plugins {
    id 'java'
    id 'jacoco'
    id 'maven-publish'
    id 'com.github.kt3k.coveralls' version '2.12.2'
}

group = 'com.watabelabs'
version = '1.0-SNAPSHOT'

sourceCompatibility = '11'
targetCompatibility = '11'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.1'

    // Javalin dependency for testing
    testImplementation 'io.javalin:javalin:6.1.3'

    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '5.12.0'

    // dotenv-java
    implementation 'io.github.cdimascio:dotenv-java:2.2.0'

    implementation 'org.slf4j:slf4j-api:2.0.7'
    implementation 'ch.qos.logback:logback-classic:1.4.8'

    // Use Jakarta XML Bind API instead of JAXB
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:3.0.1'
    implementation 'org.glassfish.jaxb:jaxb-runtime:3.0.2'

    // Jackson module for Jakarta XML Bind annotations
    implementation 'com.fasterxml.jackson.module:jackson-module-jakarta-xmlbind-annotations:2.13.2'

    implementation 'org.bouncycastle:bcprov-jdk15on:1.70'
    implementation 'org.bouncycastle:bcpkix-jdk15on:1.70'
    implementation 'org.hibernate.validator:hibernate-validator:6.1.5.Final'
    implementation 'javax.validation:validation-api:2.0.1.Final'
}

jacoco {
    toolVersion = "0.8.7"
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}

javadoc {
    options {
        encoding 'UTF-8'
        charSet 'UTF-8'
        links 'https://docs.oracle.com/en/java/javase/11/docs/api/'
    }
}

task javadocJar(type: Jar) {
    dependsOn javadoc
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

def githubProperties = new Properties()
if (rootProject.file("github.properties").exists()) {
    githubProperties.load(new FileInputStream(rootProject.file("github.properties")))
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourcesJar
            artifact javadocJar

            pom {
                name.set("GePG Java Library")
                description.set("A Java library for GePG integration")
                url.set("https://github.com/zechtz/gepg-java")
                licenses {
                    license {
                        name.set("The MIT License")
                        url.set("https://opensource.org/licenses/MIT")
                    }
                }
                developers {
                    developer {
                        id.set("zechtz")
                        name.set("Watabe Labs")
                        email.set("zachariahn@gmail.com")
                    }
                }
                scm {
                    connection.set("scm:git:git://github.com/zechtz/gepg-java")
                    developerConnection.set("scm:git:ssh://github.com/zechtz/gepg-java")
                    url.set("https://github.com/zechtz/gepg-java")
                }
            }
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/zechtz/gepg-java")
            credentials {
                username = githubProperties['gpr.usr'] ?: System.getenv("GITHUB_ACTOR")
                password = githubProperties['gpr.key'] ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

coveralls {
    jacocoReportPath 'build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml'
}

tasks.coveralls {
    dependsOn 'jacocoTestReport'
}

tasks.publish {
    dependsOn javadocJar
}

